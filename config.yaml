units:
  # `kx`/`ky`: The horizontal/vertical distance between
  # the "points" (i.e. the center points of the keys).
  #
  # `cx`/`cy` are built-in variables for Choc key width (18mm) and
  # height (17mm). I measured my Choc MBK blank keycaps with digital
  # calipers and I got a width of 16.5 mm and a height of 17.5 mm, so
  # it seems that the `cx`/`cy` already have some built-in padding.
  #
  # `u` is the built-in variable for cherry MX key width/height
  # (19mm). The width and height of MX keys are the same.
  kx: cx
  ky: cy
  # `px`/`py`: The padded key width/height.
  #
  # These variables are used only for generating outlines (e.g. the
  # PCB shape), so there will be some extra padding between the edge
  # of the keyswitches/microcontrollers and the outer boundary.
  padding: 2
  px: cx + 2 * padding
  py: cy + 2 * padding
  # Sets the width/height of the rectangles when rendering the keys in
  # the output SVG. By default, cherry MX size rectangles are used,
  # which is confusing/misleading since we are using Choc spacing for
  # the keyboard. I measured the real width/height of the Choc keycaps
  # (see above note), and it seems to be 0.5 mm less that `cx`/`cy` in
  # each dimension.
  $default_width: cx - 0.5
  $default_height: cy - 0.5
  # Microcontroller dimensions (Arduino Pro Micro).
  #
  # Note 1: The default orientation of the `promicro` footprint is
  # horizontal, so that the longer dimension is parallel to the
  # x-axis. I have to rotate it by -90 degrees to get it into vertical
  # orientation, which is what I use for this keyboard. (It also the
  # orientation that most other custom keyboards use.)
  #
  # Note 2: I determined these dimensions by measuring the Ergogen
  # footprint in KiCad, using the ruler tool.
  #
  # Note 3: The origin point for the footprint is not centered along
  # the longer dimension, so I split the measurements into two
  # variables: `promicro_top_height` and `promicro_bottom_width`.
  promicro_top_height: 17.78
  promicro_bottom_height: 15.20
  promicro_width: 17.78
  # TRRS jack dimensions (TRRS-PJ-320).
  #
  # Note: If you open the TRRS footprint in the KiCad footprint
  # editor, you will see that it is not centered on the origin point
  # for the footprint. The `trrs_offset_x`/`trrs_offset_y` values are
  # the offset of the origin from center point of the TRRS housing.
  trrs_width: 6.1
  trrs_offset_x: 2.3
  trrs_offset_y: 6.05
  # Reset button (for flashing the microcontroller).
  reset_button_size: 5.5

points:
  zones:
    fingercluster:
      # Fix placement of PCB on KiCAD sheet.
      anchor:
        shift: [100, -100]
      key:
        spread: 1kx
        padding: 1ky
      columns:
        outer:
          key:
            column_net: P10
        pinky:
          key:
            column_net: P16
        ring:
          key:
            column_net: P14
            stagger: 0.5 * ky
        middle:
          key:
            column_net: P15
        index:
          key:
            column_net: P18
            stagger: -0.5 * ky
        inner:
          key:
            column_net: P19
      rows:
        bottom:
          row_net: P9
        top:
          row_net: P6
    thumbcluster:
      key:
        padding: 1ky
        spread: 1kx
      anchor:
        ref: fingercluster_index_bottom
        shift: [0, -2ky]
      columns:
        left:
          key:
            column_net: P15
            splay: -15
        right:
          key:
            column_net: P18
        inner:
          key:
            column_net: P19
            origin: [-kx/2, -ky/2]
            splay: -30
      rows:
        row0:
          row_net: P8
    promicro:
      anchor:
        # Use middle finger key in top row
        # (`fingercluster_middle_top`) as the reference point, so I
        # can align the top edge of the `promicro` to the top edge of
        # the highest key.
        ref: fingercluster_middle_top
        shift: [2.5kx + padding + promicro_width/2, ky/2 - promicro_top_height]
        rotate: -90
      columns.col0:
      rows.row0:
    trrs:
      anchor:
        # Note 1: `orient: 90` undoes the 90 degree rotation on the
        # promicro, which we are using as our reference point.  This
        # restores the TRRS footprint to its default vertical
        # orientation.
        #
        # Note 2: We add `trrs_offset_x` here because the TRRS
        # footprint is not horizontally centered on the local origin
        # of the footprint. (You can open it in the KiCad footprint
        # editor, to see what I mean.) The TRRS footprint is not
        # vertically centered either, but as luck would have it, the
        # top edge of the TRRS housing aligns with the footprint
        # origin, so we don't need to make any vertical adjustments.
        ref: promicro_col0_row0
        orient: 90
        shift: [trrs_offset_x + promicro_width/2 + padding + trrs_width/2, promicro_top_height]
      columns.col0:
      rows.row0:
    reset_button:
      anchor:
        ref: promicro_col0_row0
        # Note: `orient: 90` undoes the 90 degree rotation on the
        # promicro, which we are using as our reference point. This
        # restores the button footprint to its default orientation.
        orient: 90
        shift: [promicro_width/2 + padding + reset_button_size/2 + 1, 0]
      columns.col0:
      rows.row0:

outlines:
  # Define the outline for the PCB, using the same `polygon`-based
  # approach that is demonstrated at [1].
  #
  # [1]: "Let's Design A Keyboard With Ergogen v4: Outlines (Part 2)",
  # https://flatfootfox.com/ergogen-part2-outlines/
  pcb:
    - what: polygon
      operation: stack
      fillet: 2
      points:
        - ref: fingercluster_outer_top
          shift: [-0.5px, 0.5py]
        - ref: fingercluster_ring_top
          shift: [-0.5px, 0.5py]
        - ref: fingercluster_middle_top
          shift: [0.5px, 0.5py]
        - ref: trrs_col0_row0
          shift: [trrs_width/2 + padding + 5, padding]
        - ref: trrs_col0_row0
          shift: [trrs_width/2 + padding + 5, -3.5ky]
        - ref: thumbcluster_inner_row0
          shift: [0.5px, 0.5py]
        - ref: thumbcluster_inner_row0
          shift: [0.5px, -0.5py]
        - ref: thumbcluster_left_row0
          shift: [-0.5px, -0.5py]
        - ref: fingercluster_outer_bottom
          shift: [-0.5px, -0.5py]
  # Draws the rectangles for the keys.
  keys:
    - what: rectangle
      where: true
      size: [$default_width, $default_height]
  # Draws all outlines/keys/components on top of each other.
  #
  # This is useful for debugging, so we can visualize how the various
  # component positions relate to each other.
  #
  # Note:
  #
  # So far, I've been manually opening `debug.dxf` in FreeCAD to view
  # it. I haven't yet found any viewers that would give a
  # quicker/better workflow, nor any command line tools that convert
  # DXF -> SVG.
  #
  # If I could convert the DXF file to SVG, I could view it in
  # Firefox, and just press Ctrl+R to refresh when the file
  # changes. As it stands, I need to manually reopen `debug.dxf` in
  # FreeCAD (using Ctrl+O and then selecting the file with the mouse)
  # every time I make a change and regenerate the file.
  debug:
    - name: pcb
    - operation: stack
      name: keys
pcbs:
  main:
    outlines:
      main:
        outline: pcb
    footprints:
      choc_hotswap:
        what: choc
        where: /cluster/ # exclude `promicro` and `trrs`
        params:
          keycaps: true
          reverse: true
          hotswap: true
          from: "{{column_net}}"
          to: "{{colrow}}"
      diode:
        what: diode
        where: /cluster/ # exclude `promicro` and `trrs`
        params:
          from: "{{colrow}}"
          to: "{{row_net}}"
        adjust:
          shift: [0, -5]
      promicro:
        what: promicro
        params:
          orientation: "up"
        where:
          ref: promicro_col0_row0
      trrs:
        what: trrs
        params:
          reverse: true
          # mandatory parameters for nets
          A: VCC
          B: NA
          C: P1
          D: GND
        where:
          ref: trrs_col0_row0
      reset_button:
        what: button
        params:
          from: GND
          to: RST
        where:
          ref: reset_button_col0_row0
      mountinghole_top_left:
        what: mountinghole
        where:
          ref: fingercluster_pinky_top
          shift: [-0.5kx, 0.7ky]
      mountinghole_top_middle:
        what: mountinghole
        where:
          ref: fingercluster_index_top
          shift: [0, 0.9ky]
      mountinghole_top_right:
        what: mountinghole
        where:
          ref: trrs_col0_row0
          shift: [6.5, -1.4]
      mountinghole_middle_left:
        what: mountinghole
        where:
          ref: fingercluster_outer_bottom
          shift: [-0.5kx + 1.3, -0.5ky + 0.5]
      mountinghole_middle_middle:
        what: mountinghole
        where:
          ref: fingercluster_index_bottom
          shift: [-0.5kx, -0.5ky]
      mountinghole_middle_right:
        what: mountinghole
        where:
          ref: fingercluster_inner_bottom
          shift: [2kx + 6.5, -0.85ky - 10]
      mountinghole_bottom_middle:
        what: mountinghole
        where:
          ref: thumbcluster_left_row0
          shift: [-1.0kx, -0.33kx]
      mountinghole_bottom_right:
        what: mountinghole
        where:
          ref: thumbcluster_inner_row0
          shift: [0.4cx, -0.475cy]
